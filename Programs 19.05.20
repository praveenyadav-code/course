PROGRAM 5
import java.util.Scanner;

public class ShortestPalindromeDemo {
 
public static String shortestPalindrome(String str) {
     
int x=0;  
int y=str.length()-1;
     
  while(y>=0){
     if(str.charAt(x)==str.charAt(y)){
          x++;
         }
            y--;
  }
 
if(x==str.length())
return str;
 
String suffix = str.substring(x);
String prefix = new StringBuilder(suffix).reverse().toString();
String mid = shortestPalindrome(str.substring(0, x));
 
return prefix+mid+suffix;
}
 
public static void main(String[] args) {
 
Scanner in = new Scanner(System.in);
 
System.out.println("Enter a String to find out shortest palindrome");
 
String str=in.nextLine();
 
System.out.println("Shortest palindrome of "+str+" is "+shortestPalindrome(str));
}
PROGRAM 2

import java.util.Stack;

public class LinkedListPalindromeUsingStack {

   public static void main(String[] a){

       Node n1 = new Node(10);
       Node n2 = new Node(28);
       Node n3 = new Node(15);
       Node n4 = new Node(25);
       Node n5 = new Node(10);
       n1.next = n2;
       n2.next = n3;
       n3.next = n4;
       n4.next = n5;
       boolean result = isPalindrome(n1);
       System.out.println("Is it palindrome: "+result);
   }

   static class Node {
       int data;
       Node next;
       Node(int tmp) {
           data = tmp;
       }
   }

   static boolean isPalindrome(Node head) {

       Node tempNode = head;
       Stack<Integer> stack = new Stack<Integer>();
       while(tempNode != null) {
           stack.push(tempNode.data);
           tempNode = tempNode.next;
       }
       while(head != null) {
           if(head.data != stack.pop()) {
               return Boolean.FALSE;
           }
           head = head.next;
       }

       return Boolean.TRUE;
   }
}
PROGRAM 3
#include <stdio.h>
#include <string.h>
int check_subsequence (char [], char[]);
int main () {
  int flag;
  char s1[1000], s2[1000];
  printf("Input first string\n");
  gets(s1);
  printf("Input second string\n");
  gets(s2);
  /** Passing smaller length string first */
  if (strlen(s1) < strlen(s2))
    flag = check_subsequence(s1, s2);
  else
    flag = check_subsequence(s2, s1);
  if (flag)
    printf("YES\n");
  else
    printf("NO\n");
  return 0;
}
int check_subsequence (char a[], char b[]) {
  int c, d;
  c = d = 0;
  while (a[c] != '\0') {
    while ((a[c] != b[d]) && b[d] != '\0') {
      d++;
    }
    if (b[d] == '\0')
      break;
    d++;
    c++;
  }
  if (a[c] == '\0')
    return 1;
 else
    return 0;
}
