18/05/2020
PROGRAM 1:-
package pk;
import java.util.Scanner;
public class StringOperators
{
   public static void main(String args[])
   {
        int i;
        String str;
      
        int counter[] = new int[256];
        Scanner in = new Scanner(System.in);
        
        System.out.print("Enter a String : ");
        str=in.nextLine();
        
         for (i = 0; i < str.length(); i++) {
            counter[(int) str.charAt(i)]++;
        }
        // Print Frequency of characters
        for (i = 0; i < 256; i++) {
            if (counter[i] != 0) {
                  System.out.println((char) i  + ":-" + counter[i] + " times");
            }
        }
   }
}

PROGRAM 2:-

import MainClass.sharedPrinter;
class OddThread extends Thread
{
	int limit;
	sharedPrinter printer;
	public OddThread(int limit, sharedPrinter printer)
	{
			this.limit = limit;
			this.printer = printer;
	}
@Override
	public void run() 
	{
		int oddNumber = 1;        //First odd number is 1
		while (oddNumber <= limit)
		{
			printer.printOdd(oddNumber);       //Calling printOdd() method of SharedPrinter class
			oddNumber = oddNumber + 2;         //Incrementing to next odd number
		}
	} 
}


import MainClass.sharedPrinter;
class EvenThread extends Thread
{
int limit;
sharedPrinter printer;
public EvenThread(int limit, sharedPrinter printer)
{
this.limit = limit;
this.printer = printer;
}
@Override
public void run() 
{
int evenNumber = 2;           //First even number is 2
while (evenNumber <= limit)
{
printer.printEven(evenNumber);          //Calling printEven() method of SharedPrinter class
evenNumber = evenNumber + 2;           //Incrementing to next even number
}
}
}

class sharedPrinter
{
boolean isOddPrinted = false;
synchronized void printOdd(int number)
{
while (isOddPrinted)
{
try
{
wait();
} 
catch (InterruptedException e)
{
e.printStackTrace();
}
}
System.out.println(Thread.currentThread().getName()+" : "+number);
isOddPrinted = true;
try
{
Thread.sleep(1000);
} 
catch (InterruptedException e) 
{
e.printStackTrace();
}
notify();
}
synchronized void printEven(int number)
{
while (! isOddPrinted)
{
try
{
wait();
}
catch (InterruptedException e) 
{
e.printStackTrace();
}
}
System.out.println(Thread.currentThread().getName()+" : "+number);
isOddPrinted = false;
try
{
Thread.sleep(1000);
} 
catch (InterruptedException e) 
{
e.printStackTrace();
}
notify();
}
}

public class mainclass 
{
public static void main(String[] args) 
{
sharedPrinter printer = new sharedPrinter();
OddThread oddThread = new OddThread(20, printer);
oddThread.setName("ping-->");
EvenThread evenThread = new EvenThread(20, printer);
evenThread.setName("pong-->");
oddThread.start();
evenThread.start();
}
}

PROGRAM 3:-
#include <bits/stdc++.h>
using namespace std;

int anagram(string s1,string s2){
	int array1[26]={0},array2[26]={0};

	if(s1.length()!=s2.length())
		return 0; 
	for(int i=0;s1[i]!='\0';i++){
		
		array1[s1[i]-'a']++;     
	}


	for(int i=0;s2[i]!='\0';i++){
	 
		array2[s2[i]-'a']++;   
	}

	for(int i=0;i<26;i++){
	
		if(array1[i]!=array2[i]) 
			return 0;
	}

	return 1;
}
int main()
{
	int n;
	string s1,s2;

	
	cout<<"enter string1\n";
	cin>>s1;
	cout<<"enter string2\n";
	cin>>s2;

	if(anagram(s1,s2))
		printf("strings are anagrams of each other\n");
	else
		printf("strings are not anagrams of each other\n");

	return 0;
}
PROGRAM 4:-

#include <iostream>
#include <string>
int main() {
  int test_case, n;
  int i, j, l, m, k, count = 0, sum = 0;
  std::cin >> test_case;
  for (i = 0; i < test_case; i++) {
    std::cin >> n;
    int arr[n];
    for (j = 0; j < n; j++) {
      std::cin >> arr[j];

    }
    for (l = 0; l < n; l++) {
      for (m = l + 1; m < n; m++) {
        sum = arr[l] + arr[m];
        for (k = 0; k < n; k++) {
          if (sum == arr[k]) {

            count = count + 1;

          }

        }
        sum = 0;

      }

    }
    if (count == 0) {
      std::cout << -1 << "\n";
    } else {
      std::cout << count << "\n";
      count = 0;
    }

  }
}
