18/05/2020
PROGRAM 1:-
package pk;
import java.util.Scanner;
public class StringOperators
{
   public static void main(String args[])
   {
        int i;
        String str;
      
        int counter[] = new int[256];
        Scanner in = new Scanner(System.in);
        
        System.out.print("Enter a String : ");
        str=in.nextLine();
        
         for (i = 0; i < str.length(); i++) {
            counter[(int) str.charAt(i)]++;
        }
        // Print Frequency of characters
        for (i = 0; i < 256; i++) {
            if (counter[i] != 0) {
                  System.out.println((char) i  + ":-" + counter[i] + " times");
            }
        }
   }
}

PROGRAM 2:-

import MainClass.sharedPrinter;
class OddThread extends Thread
{
	int limit;
	sharedPrinter printer;
	public OddThread(int limit, sharedPrinter printer)
	{
			this.limit = limit;
			this.printer = printer;
	}
@Override
	public void run() 
	{
		int oddNumber = 1;        //First odd number is 1
		while (oddNumber <= limit)
		{
			printer.printOdd(oddNumber);       //Calling printOdd() method of SharedPrinter class
			oddNumber = oddNumber + 2;         //Incrementing to next odd number
		}
	} 
}


import MainClass.sharedPrinter;
class EvenThread extends Thread
{
int limit;
sharedPrinter printer;
public EvenThread(int limit, sharedPrinter printer)
{
this.limit = limit;
this.printer = printer;
}
@Override
public void run() 
{
int evenNumber = 2;           //First even number is 2
while (evenNumber <= limit)
{
printer.printEven(evenNumber);          //Calling printEven() method of SharedPrinter class
evenNumber = evenNumber + 2;           //Incrementing to next even number
}
}
}

class sharedPrinter
{
boolean isOddPrinted = false;
synchronized void printOdd(int number)
{
while (isOddPrinted)
{
try
{
wait();
} 
catch (InterruptedException e)
{
e.printStackTrace();
}
}
System.out.println(Thread.currentThread().getName()+" : "+number);
isOddPrinted = true;
try
{
Thread.sleep(1000);
} 
catch (InterruptedException e) 
{
e.printStackTrace();
}
notify();
}
synchronized void printEven(int number)
{
while (! isOddPrinted)
{
try
{
wait();
}
catch (InterruptedException e) 
{
e.printStackTrace();
}
}
System.out.println(Thread.currentThread().getName()+" : "+number);
isOddPrinted = false;
try
{
Thread.sleep(1000);
} 
catch (InterruptedException e) 
{
e.printStackTrace();
}
notify();
}
}

public class mainclass 
{
public static void main(String[] args) 
{
sharedPrinter printer = new sharedPrinter();
OddThread oddThread = new OddThread(20, printer);
oddThread.setName("ping-->");
EvenThread evenThread = new EvenThread(20, printer);
evenThread.setName("pong-->");
oddThread.start();
evenThread.start();
}
}
